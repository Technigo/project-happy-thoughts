{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport JavascriptTimeAgo from 'javascript-time-ago';\nimport { style } from 'javascript-time-ago/prop-types';\nimport Periodic from './Periodic';\nimport createVerboseDateFormatter from './verboseDateFormatter';\nimport { getDate, isMockedDate } from './helpers/date'; // `PureComponent` is only available in React >= 15.3.0.\n\nvar PureComponent = React.PureComponent || React.Component;\n\nvar ReactTimeAgo = function (_PureComponent) {\n  _inherits(ReactTimeAgo, _PureComponent);\n\n  function ReactTimeAgo(props) {\n    _classCallCheck(this, ReactTimeAgo); // Create `javascript-time-ago` formatter instance.\n\n\n    var _this = _possibleConstructorReturn(this, (ReactTimeAgo.__proto__ || Object.getPrototypeOf(ReactTimeAgo)).call(this, props)); // `this.props` are used in `.getPreferredLocales()`.\n\n\n    _this.timeAgo = new JavascriptTimeAgo(_this.getPreferredLocales()); // Create verbose date formatter for the tooltip text.\n    // (only on client side, because tooltips aren't rendered until triggered)\n\n    if (typeof window !== 'undefined') {\n      var verboseDateFormat = _this.props.verboseDateFormat;\n      _this.formatVerboseDate = createVerboseDateFormatter(_this.getPreferredLocales(), verboseDateFormat);\n    }\n\n    return _this;\n  }\n\n  _createClass(ReactTimeAgo, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var _props = this.props,\n          tick = _props.tick,\n          updateInterval = _props.updateInterval; // If time label autoupdates are enabled.\n\n      if (tick) {\n        // Run automatic time label updater (in a web browser).\n        if (!window._react_time_ago_updater) {\n          window._react_time_ago_updater = new Periodic(updateInterval);\n        } // Register for the relative time autoupdate as the time goes by.\n\n\n        this.stopAutoupdate = window._react_time_ago_updater.add(function () {\n          return _this2.forceUpdate();\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.stopAutoupdate) {\n        this.stopAutoupdate();\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          _date = _props2.date,\n          timeStyle = _props2.timeStyle,\n          tooltip = _props2.tooltip,\n          container = _props2.container,\n          locale = _props2.locale,\n          locales = _props2.locales,\n          formatVerboseDate = _props2.formatVerboseDate,\n          verboseDateFormat = _props2.verboseDateFormat,\n          updateInterval = _props2.updateInterval,\n          tick = _props2.tick,\n          rest = _objectWithoutProperties(_props2, ['date', 'timeStyle', 'tooltip', 'container', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick']); // The date or timestamp that was passed.\n      // Convert timestamp to `Date`.\n\n\n      var date = getDate(_date); // Format verbose date for the tooltip.\n      // (only on client side, because tooltips aren't rendered until triggered)\n\n      var verboseDate = typeof window === 'undefined' ? undefined : this.getVerboseDate(date);\n      var timeAgo = React.createElement('time', _extends({\n        dateTime: date.toISOString(),\n        title: tooltip ? verboseDate : undefined\n      }, rest), this.timeAgo.format(date, timeStyle));\n\n      if (container) {\n        return React.createElement(container, _extends({\n          verboseDate: verboseDate\n        }, rest), timeAgo);\n      }\n\n      return timeAgo;\n    } // Composes a list of preferred locales\n\n  }, {\n    key: 'getPreferredLocales',\n    value: function getPreferredLocales() {\n      var locale = this.props.locale;\n      var locales = this.props.locales; // Convert `locale` to `locales`.\n\n      if (locale) {\n        locales = [locale];\n      } // `javascript-time-ago` default locale.\n\n\n      locales = locales.concat(JavascriptTimeAgo.getDefaultLocale());\n      return locales;\n    } // Verbose date string.\n    // Is used as a tooltip text.\n    //\n    // E.g. \"Sunday, May 18th, 2012, 18:45\"\n    //\n\n  }, {\n    key: 'getVerboseDate',\n    value: function getVerboseDate(input) {\n      var formatVerboseDate = this.props.formatVerboseDate;\n\n      if (formatVerboseDate) {\n        return formatVerboseDate(convertToDate(input));\n      }\n\n      return this.formatVerboseDate(convertToDate(input));\n    }\n  }]);\n\n  return ReactTimeAgo;\n}(PureComponent); // Converts argument into a `Date`.\n\n\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Preferred locales (ordered).\n  // Will choose the first suitable locale from this list.\n  // (the one that has been initialized)\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // Date/time formatting style.\n  // E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\n  timeStyle: style,\n  // Whether HTML `tooltip` attribute should be set\n  // to verbosely formatted date (is `true` by default).\n  // Set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // An optional function returning what will be output in the HTML `title` tooltip attribute.\n  // (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\n  // Is used when `formatVerboseDate` is not specified.\n  // By default outputs a verbose date.\n  verboseDateFormat: PropTypes.object,\n  // How often to update all `<ReactTimeAgo/>` elements on a page.\n  // (is once in a minute by default)\n  updateInterval: PropTypes.number,\n  // Set to `false` to disable automatic refresh of\n  // `<ReactTimeAgo/>` elements on a page as time goes by.\n  // (is `true` by default)\n  tick: PropTypes.bool,\n  // React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  //\n  // ```js\n  // import React from 'react'\n  // import ReactTimeAgo from 'react-time-ago'\n  // import { Tooltip } from 'react-responsive-ui'\n  // \n  // export default function TimeAgo(props) {\n  //   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\n  // }\n  // \n  // const Container = ({ verboseDate, children }) => (\n  //   <Tooltip content={verboseDate}>\n  //     {children}\n  //   </Tooltip>\n  // )\n  // ```\n  //\n  container: PropTypes.func\n};\nReactTimeAgo.defaultProps = {\n  locales: [],\n  tooltip: true,\n  // Thursday, December 20, 2012, 7:00:00 AM GMT+4\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName : 'short'\n\n  },\n  // Updates once a minute\n  updateInterval: 60 * 1000,\n  // Refreshes time in a web browser by default\n  tick: true\n};\nexport default ReactTimeAgo;\n\nfunction convertToDate(input) {\n  if (input.constructor === Date || isMockedDate(input)) {\n    return input;\n  }\n\n  if (typeof input === 'number') {\n    return new Date(input);\n  }\n\n  throw new Error('Unsupported react-time-ago input: ' + (typeof input === 'undefined' ? 'undefined' : _typeof(input)) + ', ' + input);\n} // Deprecated CDN legacy export.\n// Will be removed in version 6.x\n\n\nReactTimeAgo.default = ReactTimeAgo; // ReactTimeAgo.addLocale = (data) => JavascriptTimeAgo.addLocale(data)","map":{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["PureComponent","React","ReactTimeAgo","propTypes","date","PropTypes","locale","locales","timeStyle","tooltip","formatVerboseDate","verboseDateFormat","updateInterval","tick","container","func","defaultProps","weekday","day","month","year","hour","minute","second","createVerboseDateFormatter","window","_date","rest","getDate","verboseDate","timeAgo","undefined","JavascriptTimeAgo","input","convertToDate","isMockedDate"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport JavascriptTimeAgo from 'javascript-time-ago'\r\nimport { style } from 'javascript-time-ago/prop-types'\r\n\r\nimport Periodic from './Periodic'\r\nimport createVerboseDateFormatter from './verboseDateFormatter'\r\nimport { getDate, isMockedDate } from './helpers/date'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nexport default class ReactTimeAgo extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// The `date` or `timestamp`.\r\n\t\t// E.g. `new Date()` or `1355972400000`.\r\n\t\tdate : PropTypes.oneOfType([\r\n\t\t\tPropTypes.instanceOf(Date),\r\n\t\t\tPropTypes.number\r\n\t\t]).isRequired,\r\n\r\n\t\t// Preferred locale.\r\n\t\t// Is 'en' by default.\r\n\t\t// E.g. 'ru-RU'.\r\n\t\tlocale : PropTypes.string,\r\n\r\n\t\t// Preferred locales (ordered).\r\n\t\t// Will choose the first suitable locale from this list.\r\n\t\t// (the one that has been initialized)\r\n\t\t// E.g. `['ru-RU', 'en-GB']`.\r\n\t\tlocales : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t// Date/time formatting style.\r\n\t\t// E.g. 'twitter', 'time', or custom (`{ gradation: […], units: […], flavour: 'long', custom: function }`)\r\n\t\ttimeStyle : style,\r\n\r\n\t\t// Whether HTML `tooltip` attribute should be set\r\n\t\t// to verbosely formatted date (is `true` by default).\r\n\t\t// Set to `false` to disable the native HTML `tooltip`.\r\n\t\ttooltip : PropTypes.bool.isRequired,\r\n\r\n\t\t// An optional function returning what will be output in the HTML `title` tooltip attribute.\r\n\t\t// (by default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`)\r\n\t\tformatVerboseDate : PropTypes.func,\r\n\r\n\t\t// `Intl.DateTimeFormat` format for the HTML `title` tooltip attribute.\r\n\t\t// Is used when `formatVerboseDate` is not specified.\r\n\t\t// By default outputs a verbose date.\r\n\t\tverboseDateFormat : PropTypes.object,\r\n\r\n\t\t// How often to update all `<ReactTimeAgo/>` elements on a page.\r\n\t\t// (is once in a minute by default)\r\n\t\tupdateInterval : PropTypes.number,\r\n\r\n\t\t// Set to `false` to disable automatic refresh of\r\n\t\t// `<ReactTimeAgo/>` elements on a page as time goes by.\r\n\t\t// (is `true` by default)\r\n\t\ttick : PropTypes.bool,\r\n\r\n\t\t// React Component to wrap the resulting `<time/>` React Element.\r\n\t\t// Receives `verboseDate` and `children` properties.\r\n\t\t// `verboseDate` can be used for displaying verbose date label\r\n\t\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t\t//\r\n\t\t// ```js\r\n\t\t// import React from 'react'\r\n\t\t// import ReactTimeAgo from 'react-time-ago'\r\n\t\t// import { Tooltip } from 'react-responsive-ui'\r\n\t\t// \r\n\t\t// export default function TimeAgo(props) {\r\n\t\t//   return <ReactTimeAgo {...props} container={Container} tooltip={false}/>\r\n\t\t// }\r\n\t\t// \r\n\t\t// const Container = ({ verboseDate, children }) => (\r\n\t\t//   <Tooltip content={verboseDate}>\r\n\t\t//     {children}\r\n\t\t//   </Tooltip>\r\n\t\t// )\r\n\t\t// ```\r\n\t\t//\r\n\t\tcontainer : PropTypes.func\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tlocales : [],\r\n\r\n\t\ttooltip : true,\r\n\r\n\t\t// Thursday, December 20, 2012, 7:00:00 AM GMT+4\r\n\t\tverboseDateFormat:\r\n\t\t{\r\n\t\t\tweekday      : 'long',\r\n\t\t\tday          : 'numeric',\r\n\t\t\tmonth        : 'long',\r\n\t\t\tyear         : 'numeric',\r\n\t\t\thour         : 'numeric',\r\n\t\t\tminute       : '2-digit',\r\n\t\t\tsecond       : '2-digit',\r\n\t\t\t// timeZoneName : 'short'\r\n\t\t},\r\n\r\n\t\t// Updates once a minute\r\n\t\tupdateInterval : 60 * 1000,\r\n\r\n\t\t// Refreshes time in a web browser by default\r\n\t\ttick : true\r\n\t}\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\t// `this.props` are used in `.getPreferredLocales()`.\r\n\t\tsuper(props)\r\n\r\n\t\t// Create `javascript-time-ago` formatter instance.\r\n\t\tthis.timeAgo = new JavascriptTimeAgo(this.getPreferredLocales())\r\n\r\n\t\t// Create verbose date formatter for the tooltip text.\r\n\t\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tconst { verboseDateFormat } = this.props\r\n\t\t\tthis.formatVerboseDate = createVerboseDateFormatter(this.getPreferredLocales(), verboseDateFormat)\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\ttick,\r\n\t\t\tupdateInterval\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// If time label autoupdates are enabled.\r\n\t\tif (tick)\r\n\t\t{\r\n\t\t\t// Run automatic time label updater (in a web browser).\r\n\t\t\tif (!window._react_time_ago_updater) {\r\n\t\t\t\twindow._react_time_ago_updater = new Periodic(updateInterval)\r\n\t\t\t}\r\n\r\n\t\t\t// Register for the relative time autoupdate as the time goes by.\r\n\t\t\tthis.stopAutoupdate = window._react_time_ago_updater.add(() => this.forceUpdate())\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tif (this.stopAutoupdate) {\r\n\t\t\tthis.stopAutoupdate()\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tdate: _date,\r\n\t\t\ttimeStyle,\r\n\t\t\ttooltip,\r\n\t\t\tcontainer,\r\n\t\t\t// Rest\r\n\t\t\tlocale,\r\n\t\t\tlocales,\r\n\t\t\tformatVerboseDate,\r\n\t\t\tverboseDateFormat,\r\n\t\t\tupdateInterval,\r\n\t\t\ttick,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\t// The date or timestamp that was passed.\r\n\t\t// Convert timestamp to `Date`.\r\n\t\tconst date = getDate(_date)\r\n\r\n\t\t// Format verbose date for the tooltip.\r\n\t\t// (only on client side, because tooltips aren't rendered until triggered)\r\n\t\tconst verboseDate = typeof window === 'undefined' ? undefined : this.getVerboseDate(date)\r\n\r\n\t\tconst timeAgo = (\r\n\t\t\t<time\r\n\t\t\t\tdateTime={date.toISOString()}\r\n\t\t\t\ttitle={tooltip ? verboseDate : undefined} \r\n\t\t\t\t{...rest}>\r\n\t\t\t\t{this.timeAgo.format(date, timeStyle)}\r\n\t\t\t</time>\r\n\t\t)\r\n\r\n\t\tif (container) {\r\n\t\t\treturn React.createElement(\r\n\t\t\t\tcontainer,\r\n\t\t\t\t{\r\n\t\t\t\t\tverboseDate,\r\n\t\t\t\t\t...rest\r\n\t\t\t\t},\r\n\t\t\t\ttimeAgo\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn timeAgo\r\n\t}\r\n\r\n\t// Composes a list of preferred locales\r\n\tgetPreferredLocales()\r\n\t{\r\n\t\tconst { locale } = this.props\r\n\t\tlet { locales } = this.props\r\n\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\r\n\t\t// `javascript-time-ago` default locale.\r\n\t\tlocales = locales.concat(JavascriptTimeAgo.getDefaultLocale())\r\n\r\n\t\treturn locales\r\n\t}\r\n\r\n\t// Verbose date string.\r\n\t// Is used as a tooltip text.\r\n\t//\r\n\t// E.g. \"Sunday, May 18th, 2012, 18:45\"\r\n\t//\r\n\tgetVerboseDate(input)\r\n\t{\r\n\t\tconst { formatVerboseDate } = this.props\r\n\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(convertToDate(input))\r\n\t\t}\r\n\r\n\t\treturn this.formatVerboseDate(convertToDate(input))\r\n\t}\r\n}\r\n\r\n// Converts argument into a `Date`.\r\nfunction convertToDate(input)\r\n{\r\n\tif (input.constructor === Date || isMockedDate(input)) {\r\n\t\treturn input\r\n\t}\r\n\r\n\tif (typeof input === 'number') {\r\n\t\treturn new Date(input)\r\n\t}\r\n\r\n\tthrow new Error(`Unsupported react-time-ago input: ${typeof input}, ${input}`)\r\n}\r\n\r\n// Deprecated CDN legacy export.\r\n// Will be removed in version 6.x\r\nReactTimeAgo.default = ReactTimeAgo\r\n\r\n// ReactTimeAgo.addLocale = (data) => JavascriptTimeAgo.addLocale(data)"]},"metadata":{},"sourceType":"module"}