import * as React from "react";
import { ActualPlace, Event, Place } from "./models";
interface Props {
    place: Place | ActualPlace[];
    safetyMarginOfHint: number;
    centralizes: boolean;
    bodyClass: string;
    usesTransition: boolean;
    targetMoves: boolean;
    rendersSmoothly: boolean;
    events: Event[];
    keepsOriginalPlace: boolean;
    content: JSX.Element | string | ((rect: ClientRect) => JSX.Element | string);
}
declare const initialState: {
    rect: Readonly<ClientRect> | null;
    rendersBody: boolean;
    showsBody: boolean;
    originalPlace: "top" | "bottom" | "left" | "right" | "column" | "row" | "start" | "end" | null;
};
declare type State = Readonly<typeof initialState>;
declare class ReactPortalHint extends React.Component<Props, State> {
    static defaultProps: Pick<Props, "place" | "safetyMarginOfHint" | "centralizes" | "bodyClass" | "usesTransition" | "targetMoves" | "rendersSmoothly" | "events" | "keepsOriginalPlace" | "content">;
    static setBaseElement(element: string | HTMLElement): void;
    readonly state: State;
    private targetRef;
    private ro;
    private intervalHandler;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): React.ReactNode;
    readonly show: () => void;
    readonly hide: () => void;
    private updateRect;
    private onClick;
    private onDoubleClick;
    private onFocus;
    private onBlur;
    private onMouseEnter;
    private onMouseLeave;
    private onDisappeared;
}
export default ReactPortalHint;
